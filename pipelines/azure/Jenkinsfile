pipeline {
    agent any
    
    environment {
        // Configurações do Azure - pegue das credenciais do Jenkins
        AZURE_SUBSCRIPTION = '7ffb36a8-96d2-4da6-ad22-e2751a217c90' // Sua subscription ID
        
        // Configurações do ACR
        ACR_NAME = 'jenkinscidacr'
        ACR_LOGIN_SERVER = "${ACR_NAME}.azurecr.io"
        
        // Configurações da aplicação
        APP_NAME = 'service-app'
        DOCKER_IMAGE = 'service-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        IMAGE_TAG = "${BUILD_NUMBER}"
        APP_PORT = '5001'
        APP_VERSION = "${BUILD_NUMBER}"
        
        // Configurações do Azure Container Instances
        RESOURCE_GROUP = 'jenkins-cicd-rg'
        CONTAINER_GROUP = 'jenkins-cicd-container-group'
        
        // Configurações do SonarQube e Trivy (opcional)
        SONAR_SERVER = 'http://your-sonarqube-ip:9000'
        SONAR_PROJECT = 'service-app'
        TRIVY_SERVER_URL = 'http://your-trivy-server:8080' // Configure conforme necessário
        
        // Configuração do workspace
        HOME = "${WORKSPACE}"
    }
    
    stages {
        stage('Verify Azure Access') {
            steps {
                echo "🔍 Verificando acesso ao Azure..."
                withCredentials([
                    string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                    string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                    string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID'),
                    string(credentialsId: 'azure-subscription-id', variable: 'AZURE_SUBSCRIPTION_ID')
                ]) {
                    sh '''
                    echo "Testando acesso ao Azure usando Docker..."
                    docker run --rm \
                      -e AZURE_TENANT_ID=$AZURE_TENANT_ID \
                      -e AZURE_CLIENT_ID=$AZURE_CLIENT_ID \
                      -e AZURE_CLIENT_SECRET=$AZURE_CLIENT_SECRET \
                      -e AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION \
                      mcr.microsoft.com/azure-cli:latest az account show
                    '''
                }
            }
        }
        
        stage('🏗️ Build Docker Image') {
            steps {
                echo "🏗️ Building Docker image..."
                script {
                    // Assumindo que o Dockerfile está no diretório service-app
                    dir('service-app') {
                        sh """
                            echo "Building image: ${APP_NAME}:${IMAGE_TAG}"
                            docker build -t ${APP_NAME}:${IMAGE_TAG} .
                            docker tag ${APP_NAME}:${IMAGE_TAG} ${APP_NAME}:latest
                            docker tag ${APP_NAME}:${IMAGE_TAG} ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG}
                            docker tag ${APP_NAME}:${IMAGE_TAG} ${ACR_LOGIN_SERVER}/${APP_NAME}:latest
                        """
                    }
                }
            }
        }
        
        stage('🔐 Login to ACR') {
            steps {
                echo "🔐 Logging into Azure Container Registry..."
                withCredentials([
                    string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                    string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                    string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID')
                ]) {
                    sh '''
                    # Login no Azure usando service principal
                    docker run --rm \
                      -e AZURE_TENANT_ID=$AZURE_TENANT_ID \
                      -e AZURE_CLIENT_ID=$AZURE_CLIENT_ID \
                      -e AZURE_CLIENT_SECRET=$AZURE_CLIENT_SECRET \
                      mcr.microsoft.com/azure-cli:latest \
                      az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                    
                    # Login no ACR
                    echo $AZURE_CLIENT_SECRET | docker login $ACR_LOGIN_SERVER -u $AZURE_CLIENT_ID --password-stdin
                    '''
                }
            }
        }
        
        stage('📤 Push to ACR') {
            steps {
                echo "📤 Pushing image to Azure Container Registry..."
                sh """
                    docker push ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG}
                    docker push ${ACR_LOGIN_SERVER}/${APP_NAME}:latest
                    echo "✅ Images pushed successfully!"
                """
            }
        }
        
        stage('🚀 Deploy to ACI') {
            steps {
                echo "🚀 Deploying to Azure Container Instances..."
                withCredentials([
                    string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                    string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                    string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID')
                ]) {
                    script {
                        try {
                            sh """
                                # Fazer login no Azure CLI
                                docker run --rm \
                                  -e AZURE_TENANT_ID=$AZURE_TENANT_ID \
                                  -e AZURE_CLIENT_ID=$AZURE_CLIENT_ID \
                                  -e AZURE_CLIENT_SECRET=$AZURE_CLIENT_SECRET \
                                  mcr.microsoft.com/azure-cli:latest \
                                  az login --service-principal -u \$AZURE_CLIENT_ID -p \$AZURE_CLIENT_SECRET --tenant \$AZURE_TENANT_ID
                                
                                # Criar/atualizar container instance
                                docker run --rm \
                                  -e AZURE_TENANT_ID=$AZURE_TENANT_ID \
                                  -e AZURE_CLIENT_ID=$AZURE_CLIENT_ID \
                                  -e AZURE_CLIENT_SECRET=$AZURE_CLIENT_SECRET \
                                  mcr.microsoft.com/azure-cli:latest \
                                  az container create \
                                    --resource-group ${RESOURCE_GROUP} \
                                    --name ${CONTAINER_GROUP} \
                                    --image ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG} \
                                    --cpu 0.5 \
                                    --memory 1.0 \
                                    --ports 8000 \
                                    --protocol TCP \
                                    --restart-policy Always \
                                    --registry-login-server ${ACR_LOGIN_SERVER} \
                                    --registry-username \$AZURE_CLIENT_ID \
                                    --registry-password \$AZURE_CLIENT_SECRET \
                                    --ip-address Public \
                                    --dns-name-label ${CONTAINER_GROUP} \
                                    --environment-variables PYTHONUNBUFFERED=1 PORT=8000 ENV=production
                            """
                            
                            echo "✅ Deployment completed successfully!"
                            
                        } catch (Exception e) {
                            echo "⚠️ Container create failed, trying restart..."
                            echo "Error: ${e.getMessage()}"
                            
                            // Se create falhar, tentar restart
                            sh """
                                docker run --rm \
                                  -e AZURE_TENANT_ID=$AZURE_TENANT_ID \
                                  -e AZURE_CLIENT_ID=$AZURE_CLIENT_ID \
                                  -e AZURE_CLIENT_SECRET=$AZURE_CLIENT_SECRET \
                                  mcr.microsoft.com/azure-cli:latest \
                                  az container restart \
                                    --resource-group ${RESOURCE_GROUP} \
                                    --name ${CONTAINER_GROUP}
                            """
                            
                            echo "🔄 Container restarted"
                        }
                    }
                }
            }
        }
        
        stage('📊 Generate Reports') {
            steps {
                echo "📊 Generating deployment reports..."
                withCredentials([
                    string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                    string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                    string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID')
                ]) {
                    script {
                        sh """
                            echo "=== DEPLOYMENT REPORT ===" > deployment_report.txt
                            echo "Build Number: ${BUILD_NUMBER}" >> deployment_report.txt
                            echo "Image: ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG}" >> deployment_report.txt
                            echo "Timestamp: \$(date)" >> deployment_report.txt
                            echo "Status: ${currentBuild.result ?: 'SUCCESS'}" >> deployment_report.txt
                            echo "" >> deployment_report.txt
                            
                            # Status do container
                            echo "=== CONTAINER STATUS ===" >> deployment_report.txt
                            docker run --rm \
                              -e AZURE_TENANT_ID=$AZURE_TENANT_ID \
                              -e AZURE_CLIENT_ID=$AZURE_CLIENT_ID \
                              -e AZURE_CLIENT_SECRET=$AZURE_CLIENT_SECRET \
                              mcr.microsoft.com/azure-cli:latest \
                              az container show \
                                --resource-group ${RESOURCE_GROUP} \
                                --name ${CONTAINER_GROUP} \
                                --query "instanceView.state" \
                                --output tsv >> deployment_report.txt 2>/dev/null || echo "Status check failed" >> deployment_report.txt
                            
                            # Logs do container (últimas 10 linhas)
                            echo "" >> deployment_report.txt
                            echo "=== CONTAINER LOGS (last 10 lines) ===" >> deployment_report.txt
                            docker run --rm \
                              -e AZURE_TENANT_ID=$AZURE_TENANT_ID \
                              -e AZURE_CLIENT_ID=$AZURE_CLIENT_ID \
                              -e AZURE_CLIENT_SECRET=$AZURE_CLIENT_SECRET \
                              mcr.microsoft.com/azure-cli:latest \
                              az container logs \
                                --resource-group ${RESOURCE_GROUP} \
                                --name ${CONTAINER_GROUP} \
                                --tail 10 >> deployment_report.txt 2>/dev/null || echo "Logs not available" >> deployment_report.txt
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "🧹 Cleaning up..."
            
            // Arquivar artefatos
            archiveArtifacts artifacts: '*.json, *.txt', allowEmptyArchive: true
            
            // Limpar imagens locais para economizar espaço
            sh """
                docker rmi ${APP_NAME}:${IMAGE_TAG} || true
                docker rmi ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG} || true
                docker rmi ${ACR_LOGIN_SERVER}/${APP_NAME}:latest || true
            """
        }
        
        success {
            echo "🎉 Pipeline executado com sucesso!"
            
            // Notificar sucesso
            sh """
                echo "✅ Deployment Success - Build ${BUILD_NUMBER}" > success_notification.txt
                echo "Application URL: http://${CONTAINER_GROUP}.eastus.azurecontainer.io:8000" >> success_notification.txt
                echo "ACR Image: ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG}" >> success_notification.txt
            """
        }
        
        failure {
            echo "❌ Pipeline falhou!"
            
            // Notificar falha
            sh """
                echo "❌ Deployment Failed - Build ${BUILD_NUMBER}" > failure_notification.txt
                echo "Check logs for details" >> failure_notification.txt
                echo "Last successful stage before failure" >> failure_notification.txt
            """
        }
        
        unstable {
            echo "⚠️ Pipeline instável - verifique os alertas"
            
            // Notificar instabilidade
            sh """
                echo "⚠️ Deployment Unstable - Build ${BUILD_NUMBER}" > unstable_notification.txt
                echo "Pipeline completed with warnings" >> unstable_notification.txt
            """
        }
    }
}