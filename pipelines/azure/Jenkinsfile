pipeline {
    agent any
    
    environment {
        // Configurações do Azure - pegue das credenciais do Jenkins
        AZURE_SUBSCRIPTION = '7ffb36a8-96d2-4da6-ad22-e2751a217c90' // Sua subscription ID
        
        // Configurações do ACR
        ACR_NAME = 'jenkinscidacr'
        ACR_LOGIN_SERVER = "${ACR_NAME}.azurecr.io"
        
        // Configurações da aplicação
        APP_NAME = 'service-app'
        DOCKER_IMAGE = 'service-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        IMAGE_TAG = "${BUILD_NUMBER}"
        APP_PORT = '5001'
        APP_VERSION = "${BUILD_NUMBER}"
        
        // Configurações do Azure Container Instances
        RESOURCE_GROUP = 'jenkins-cicd-rg'
        CONTAINER_GROUP = 'jenkins-cicd-container-group'
        
        // Configurações do SonarQube
        SONAR_SERVER = 'http://52.179.3.47:9000'
        SONAR_PROJECT = 'service-app'
        SONAR_TOKEN = credentials('sonarqube-token') // Adicione esta credencial no Jenkins
        
        // Configuração do workspace
        HOME = "${WORKSPACE}"
    }
    
    stages {
        stage('🔍 Verify Azure Access') {
            steps {
                echo "🔍 Verificando acesso ao Azure e credenciais..."
                withCredentials([
                    string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                    string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                    string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID'),
                    string(credentialsId: 'azure-subscription-id', variable: 'AZURE_SUBSCRIPTION_ID')
                ]) {
                    script {
                        sh '''
                            echo "=== DEBUGGING AZURE CREDENTIALS ==="
                            echo "Azure Tenant ID: ${AZURE_TENANT_ID:0:8}***"
                            echo "Azure Client ID: ${AZURE_CLIENT_ID:0:8}***"
                            echo "Azure Client Secret: ${AZURE_CLIENT_SECRET:0:4}***"
                            echo "Azure Subscription: ${AZURE_SUBSCRIPTION_ID:0:8}***"
                            echo ""
                            
                            echo "=== TESTING AZURE CLI ACCESS ==="
                            # Instalar Azure CLI se não estiver disponível
                            if ! command -v az &> /dev/null; then
                                echo "Installing Azure CLI..."
                                curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                            fi
                            
                            echo "Testing Azure CLI login..."
                            az login --service-principal \
                              --username "$AZURE_CLIENT_ID" \
                              --password "$AZURE_CLIENT_SECRET" \
                              --tenant "$AZURE_TENANT_ID" \
                              --output table
                            
                            echo "Setting subscription..."
                            az account set --subscription "$AZURE_SUBSCRIPTION_ID"
                            
                            echo "Verifying account access..."
                            az account show --output table
                            
                            echo "✅ Azure CLI access verified!"
                        '''
                    }
                }
            }
        }
        
        stage('📋 Checkout & Prepare') {
            steps {
                echo "📋 Preparing workspace..."
                script {
                    // Verificar estrutura do projeto
                    sh '''
                        echo "Current directory structure:"
                        ls -la
                        if [ -d "../../service-app" ]; then
                            echo "service-app directory found"
                            ls -la ../../service-app/
                        else
                            echo "service-app directory not found, checking for Dockerfile in root"
                            if [ -f "Dockerfile" ]; then
                                echo "Dockerfile found in root directory"
                            else
                                echo "No Dockerfile found!"
                                exit 1
                            fi
                        fi
                    '''
                }
            }
        }
        
        stage('Code Analysis') {
            steps {
                echo "Executando análise de código com SonarQube..."
                withSonarQubeEnv('SonarQube') {  // Isso configura as variáveis de ambiente do SonarQube
                    dir('sample-app') {
                        script {
                            // Primeiro, vamos fazer download e descompactar o SonarScanner no workspace
                            sh '''
                            # Verificar e criar diretório para o scanner
                            mkdir -p ${WORKSPACE}/sonar-scanner
                            
                            # Baixar o SonarScanner
                            echo "Baixando SonarScanner..."
                            curl -L -o ${WORKSPACE}/sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
                            
                            # Descompactar
                            unzip -q -o ${WORKSPACE}/sonar-scanner-cli.zip -d ${WORKSPACE}/sonar-scanner
                            
                            # Tornar o binário executável
                            chmod +x ${WORKSPACE}/sonar-scanner/sonar-scanner-*/bin/sonar-scanner
                            
                            # Verificar a instalação
                            ls -la ${WORKSPACE}/sonar-scanner/sonar-scanner-*/bin/
                            '''
                            
                            // Criar o arquivo de propriedades do SonarQube
                            sh '''
                            # Criar arquivo sonar-project.properties
                            cat > sonar-project.properties << EOL
                            # Identificação do projeto
                            sonar.projectKey=sample-app
                            sonar.projectName=Sample App
                            sonar.projectVersion=${APP_VERSION}

                            # Configurações do servidor
                            sonar.host.url=http://52.179.3.47:9000

                            # Caminho para os arquivos de código
                            sonar.sources=.
                            sonar.python.coverage.reportPaths=coverage.xml
                            sonar.python.xunit.reportPath=test-results.xml

                            # Codificação do código-fonte
                            sonar.sourceEncoding=UTF-8
                            EOL
                            '''
                            
                            // Executar o SonarScanner com o token
                            withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                                sh '''
                                # Exibir o diretório atual e listar arquivos
                                pwd
                                ls -la
                                
                                # Exibir o arquivo de propriedades
                                echo "Conteúdo do arquivo sonar-project.properties:"
                                cat sonar-project.properties
                                
                                # Executar o SonarScanner
                                echo "Executando SonarScanner..."
                                ${WORKSPACE}/sonar-scanner/sonar-scanner-*/bin/sonar-scanner \
                                -Dsonar.login=${SONAR_TOKEN} \
                                -Dsonar.projectBaseDir=$(pwd) \
                                -Dsonar.verbose=true
                                
                                # Verificar se o relatório foi gerado
                                echo "Verificando se o arquivo report-task.txt foi gerado:"
                                find . -name report-task.txt
                                find .scannerwork -name "report-task.txt" || echo "Arquivo não encontrado em .scannerwork"
                                
                                # Se encontrado, copiar para o diretório raiz do workspace
                                if [ -f .scannerwork/report-task.txt ]; then
                                    echo "Copiando report-task.txt para o diretório raiz..."
                                    cp .scannerwork/report-task.txt .
                                fi
                                
                                # Mostrar o conteúdo do relatório se existir
                                if [ -f report-task.txt ]; then
                                    echo "Conteúdo do arquivo report-task.txt:"
                                    cat report-task.txt
                                fi
                                '''
                            }
                        }
                    }
                }
            }
        }
        
        stage('📊 Quality Gate') {
            steps {
                echo "📊 Waiting for SonarQube Quality Gate..."
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        } else {
                            echo "✅ Quality Gate passed!"
                        }
                    }
                }
            }
        }
        
        stage('🏗️ Build Docker Image') {
            steps {
                echo "🏗️ Building Docker image..."
                script {
                    // Verificar se deve buildar do diretório service-app ou root
                    def buildDir = fileExists('../../service-app/Dockerfile') ? 'service-app' : '.'
                    
                    if (buildDir == 'service-app') {
                        dir('../../service-app') {
                            sh """
                                echo "Building image from service-app directory: ${APP_NAME}:${IMAGE_TAG}"
                                docker build -t ${APP_NAME}:${IMAGE_TAG} .
                                docker tag ${APP_NAME}:${IMAGE_TAG} ${APP_NAME}:latest
                                docker tag ${APP_NAME}:${IMAGE_TAG} ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG}
                                docker tag ${APP_NAME}:${IMAGE_TAG} ${ACR_LOGIN_SERVER}/${APP_NAME}:latest
                            """
                        }
                    } else {
                        sh """
                            echo "Building image from root directory: ${APP_NAME}:${IMAGE_TAG}"
                            docker build -t ${APP_NAME}:${IMAGE_TAG} .
                            docker tag ${APP_NAME}:${IMAGE_TAG} ${APP_NAME}:latest
                            docker tag ${APP_NAME}:${IMAGE_TAG} ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG}
                            docker tag ${APP_NAME}:${IMAGE_TAG} ${ACR_LOGIN_SERVER}/${APP_NAME}:latest
                        """
                    }
                }
            }
        }
        
        stage('🔐 Login to ACR') {
            steps {
                echo "🔐 Logging into Azure Container Registry..."
                withCredentials([
                    string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                    string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                    string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID')
                ]) {
                    sh '''
                        echo "=== ACR LOGIN PROCESS ==="
                        
                        # Re-login to Azure CLI (using the same session)
                        echo "Re-authenticating with Azure CLI..."
                        az login --service-principal \
                          --username "$AZURE_CLIENT_ID" \
                          --password "$AZURE_CLIENT_SECRET" \
                          --tenant "$AZURE_TENANT_ID" \
                          --output none
                        
                        echo "Logging into ACR using Azure CLI..."
                        az acr login --name $ACR_NAME
                        
                        echo "Alternative: Direct Docker login to ACR..."
                        echo $AZURE_CLIENT_SECRET | docker login $ACR_LOGIN_SERVER -u $AZURE_CLIENT_ID --password-stdin
                        
                        echo "✅ ACR login successful!"
                    '''
                }
            }
        }
        
        stage('📤 Push to ACR') {
            steps {
                echo "📤 Pushing image to Azure Container Registry..."
                sh """
                    echo "Pushing ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG}..."
                    docker push ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG}
                    
                    echo "Pushing ${ACR_LOGIN_SERVER}/${APP_NAME}:latest..."
                    docker push ${ACR_LOGIN_SERVER}/${APP_NAME}:latest
                    
                    echo "✅ Images pushed successfully!"
                """
            }
        }
        
        stage('🚀 Deploy to ACI') {
            steps {
                echo "🚀 Deploying to Azure Container Instances..."
                withCredentials([
                    string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                    string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                    string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID')
                ]) {
                    script {
                        // Usar a mesma sessão do Azure CLI
                        sh '''
                            echo "=== ACI DEPLOYMENT PROCESS ==="
                            
                            # Re-authenticate if needed
                            echo "Ensuring Azure CLI authentication..."
                            az login --service-principal \
                              --username "$AZURE_CLIENT_ID" \
                              --password "$AZURE_CLIENT_SECRET" \
                              --tenant "$AZURE_TENANT_ID" \
                              --output none
                            
                            az account set --subscription "$AZURE_SUBSCRIPTION"
                        '''
                        
                        try {
                            // Tentar criar novo container
                            sh """
                                echo "Creating new container instance..."
                                az container create \
                                    --resource-group ${RESOURCE_GROUP} \
                                    --name ${CONTAINER_GROUP} \
                                    --image ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG} \
                                    --cpu 0.5 \
                                    --memory 1.0 \
                                    --ports 8000 \
                                    --protocol TCP \
                                    --restart-policy Always \
                                    --registry-login-server ${ACR_LOGIN_SERVER} \
                                    --registry-username ${AZURE_CLIENT_ID} \
                                    --registry-password ${AZURE_CLIENT_SECRET} \
                                    --ip-address Public \
                                    --dns-name-label ${CONTAINER_GROUP} \
                                    --environment-variables PYTHONUNBUFFERED=1 PORT=8000 ENV=production \
                                    --output table
                            """
                            
                            echo "✅ Container created successfully!"
                            
                        } catch (Exception e) {
                            echo "⚠️ Container create failed, trying to delete and recreate..."
                            echo "Error: ${e.getMessage()}"
                            
                            // Deletar container existente e criar novo
                            sh """
                                echo "Deleting existing container..."
                                az container delete \
                                    --resource-group ${RESOURCE_GROUP} \
                                    --name ${CONTAINER_GROUP} \
                                    --yes || true
                                
                                echo "Waiting 30 seconds for cleanup..."
                                sleep 30
                                
                                echo "Creating new container..."
                                az container create \
                                    --resource-group ${RESOURCE_GROUP} \
                                    --name ${CONTAINER_GROUP} \
                                    --image ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG} \
                                    --cpu 0.5 \
                                    --memory 1.0 \
                                    --ports 8000 \
                                    --protocol TCP \
                                    --restart-policy Always \
                                    --registry-login-server ${ACR_LOGIN_SERVER} \
                                    --registry-username ${AZURE_CLIENT_ID} \
                                    --registry-password ${AZURE_CLIENT_SECRET} \
                                    --ip-address Public \
                                    --dns-name-label ${CONTAINER_GROUP} \
                                    --environment-variables PYTHONUNBUFFERED=1 PORT=8000 ENV=production \
                                    --output table
                            """
                            
                            echo "🔄 Container recreated successfully!"
                        }
                    }
                }
            }
        }
        
        stage('🔍 Health Check') {
            steps {
                echo "🔍 Performing health check..."
                withCredentials([
                    string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                    string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                    string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID')
                ]) {
                    script {
                        sh '''
                            echo "Checking container status..."
                            az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                            
                            # Verificar status do container
                            CONTAINER_STATUS=$(az container show \
                                --resource-group ${RESOURCE_GROUP} \
                                --name ${CONTAINER_GROUP} \
                                --query "instanceView.state" \
                                --output tsv)
                            
                            echo "Container Status: $CONTAINER_STATUS"
                            
                            if [ "$CONTAINER_STATUS" = "Running" ]; then
                                echo "✅ Container is running!"
                                
                                # Tentar fazer uma requisição HTTP
                                sleep 30  # Aguardar container inicializar
                                
                                CONTAINER_IP=$(az container show \
                                    --resource-group ${RESOURCE_GROUP} \
                                    --name ${CONTAINER_GROUP} \
                                    --query "ipAddress.ip" \
                                    --output tsv)
                                
                                echo "Container IP: $CONTAINER_IP"
                                echo "Application URL: http://${CONTAINER_GROUP}.eastus.azurecontainer.io:8000"
                                
                            else
                                echo "⚠️ Container is not running. Status: $CONTAINER_STATUS"
                                
                                # Mostrar logs para debug
                                echo "Container logs:"
                                az container logs \
                                    --resource-group ${RESOURCE_GROUP} \
                                    --name ${CONTAINER_GROUP} || true
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('📊 Generate Reports') {
            steps {
                echo "📊 Generating deployment reports..."
                withCredentials([
                    string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                    string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                    string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID')
                ]) {
                    script {
                        sh '''
                            echo "Logging into Azure for reports..."
                            az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                            
                            echo "=== DEPLOYMENT REPORT ===" > deployment_report.txt
                            echo "Build Number: ${BUILD_NUMBER}" >> deployment_report.txt
                            echo "Image: ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG}" >> deployment_report.txt
                            echo "Timestamp: $(date)" >> deployment_report.txt
                            echo "Status: ${currentBuild.result ?: 'SUCCESS'}" >> deployment_report.txt
                            echo "" >> deployment_report.txt
                            
                            # Status do container
                            echo "=== CONTAINER STATUS ===" >> deployment_report.txt
                            az container show \
                                --resource-group ${RESOURCE_GROUP} \
                                --name ${CONTAINER_GROUP} \
                                --query "instanceView.state" \
                                --output tsv >> deployment_report.txt 2>/dev/null || echo "Status check failed" >> deployment_report.txt
                            
                            # URL da aplicação
                            echo "" >> deployment_report.txt
                            echo "=== APPLICATION URLs ===" >> deployment_report.txt
                            echo "Public URL: http://${CONTAINER_GROUP}.eastus.azurecontainer.io:8000" >> deployment_report.txt
                            
                            # IP do container
                            CONTAINER_IP=$(az container show \
                                --resource-group ${RESOURCE_GROUP} \
                                --name ${CONTAINER_GROUP} \
                                --query "ipAddress.ip" \
                                --output tsv 2>/dev/null || echo "IP not available")
                            echo "Container IP: $CONTAINER_IP" >> deployment_report.txt
                            
                            # Logs do container (últimas 20 linhas)
                            echo "" >> deployment_report.txt
                            echo "=== CONTAINER LOGS (last 20 lines) ===" >> deployment_report.txt
                            az container logs \
                                --resource-group ${RESOURCE_GROUP} \
                                --name ${CONTAINER_GROUP} \
                                --tail 20 >> deployment_report.txt 2>/dev/null || echo "Logs not available" >> deployment_report.txt
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "🧹 Cleaning up..."
            
            // Arquivar artefatos
            archiveArtifacts artifacts: '*.json, *.txt, **/target/sonar/report-task.txt', allowEmptyArchive: true
            
            // Publicar resultados do SonarQube
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'sonar-reports',
                reportFiles: 'index.html',
                reportName: 'SonarQube Report'
            ])
            
            // Limpar imagens locais para economizar espaço
            sh """
                docker rmi ${APP_NAME}:${IMAGE_TAG} || true
                docker rmi ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG} || true
                docker rmi ${ACR_LOGIN_SERVER}/${APP_NAME}:latest || true
                docker system prune -f || true
            """
        }
        
        success {
            echo "🎉 Pipeline executado com sucesso!"
            
            // Notificar sucesso
            sh """
                echo "✅ Deployment Success - Build ${BUILD_NUMBER}" > success_notification.txt
                echo "Application URL: http://${CONTAINER_GROUP}.eastus.azurecontainer.io:8000" >> success_notification.txt
                echo "ACR Image: ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG}" >> success_notification.txt
                echo "SonarQube: ${SONAR_SERVER}/dashboard?id=${SONAR_PROJECT}" >> success_notification.txt
            """
        }
        
        failure {
            echo "❌ Pipeline falhou!"
            
            // Notificar falha
            sh """
                echo "❌ Deployment Failed - Build ${BUILD_NUMBER}" > failure_notification.txt
                echo "Check logs for details" >> failure_notification.txt
                echo "Build failed at stage: ${env.STAGE_NAME}" >> failure_notification.txt
            """
        }
        
        unstable {
            echo "⚠️ Pipeline instável - verifique os alertas"
            
            // Notificar instabilidade
            sh """
                echo "⚠️ Deployment Unstable - Build ${BUILD_NUMBER}" > unstable_notification.txt
                echo "Pipeline completed with warnings" >> unstable_notification.txt
                echo "Check SonarQube quality gate results" >> unstable_notification.txt
            """
        }
    }
}